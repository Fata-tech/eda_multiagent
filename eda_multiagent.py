# -*- coding: utf-8 -*-
"""EDA-Multiagent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-tUJPHR44tOmPj514KjUwAEDbAKDbh_t
"""

import openai
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Ensure to set up OpenAI API Key
openai.api_key = "YOUR_API_KEY"

# Sample Dataset
data = {
    "Transaction_ID": ["T001", "T002", "T003", "T004", "T005", "T006", "T007", "T008"],
    "Customer_ID": ["C101", "C102", "C103", "C104", "C101", "C105", "C106", "C102"],
    "Product_Category": ["Electronics", "Groceries", "Fashion", "Electronics", "Groceries", "Fashion", "Groceries", "Electronics"],
    "Amount_Spent": [250.75, 50.00, 120.99, 80.50, 40.00, 220.30, 35.25, 300.00],
    "Transaction_Date": pd.to_datetime(["2023-12-01", "2023-12-02", "2023-12-03", "2023-12-04", "2023-12-05", "2023-12-06", "2023-12-07", "2023-12-08"]),
    "Payment_Method": ["Credit Card", "Cash", "Debit Card", "Digital Wallet", "Credit Card", "Credit Card", "Cash", "Debit Card"],
    "Feedback_Score": [4, 5, 3, 4, 5, 2, 4, 5]
}

# Load dataset into a Pandas DataFrame
df = pd.DataFrame(data)

# Define Autogen Agents
class DataPreparationAgent:
    @staticmethod
    def clean_data(df):
        # Handle missing values
        df.fillna(method="ffill", inplace=True)
        return df

class EDAAgent:
    @staticmethod
    def analyze_data(df):
        summary = df.describe(include="all")
        correlation = df.corr()
        return summary, correlation

    @staticmethod
    def generate_visualizations(df):
        # Distribution of Amount Spent
        plt.figure(figsize=(8, 6))
        sns.histplot(df["Amount_Spent"], kde=True)
        plt.title("Distribution of Amount Spent")
        plt.xlabel("Amount Spent")
        plt.ylabel("Frequency")
        plt.show()

        # Correlation Heatmap
        plt.figure(figsize=(8, 6))
        sns.heatmap(df.corr(), annot=True, cmap="coolwarm")
        plt.title("Correlation Heatmap")
        plt.show()

class ReportGenerationAgent:
    @staticmethod
    def generate_report(summary, correlation):
        report = f"""
        Exploratory Data Analysis Report
        =================================
        Dataset Summary:
        {summary}

        Correlation Matrix:
        {correlation}

        Key Insights:
        - The average amount spent is ${summary['Amount_Spent']['mean']:.2f}.
        - Feedback scores range from {summary['Feedback_Score']['min']} to {summary['Feedback_Score']['max']}.
        - Strong correlation observed between <Variable1> and <Variable2>.
        """
        return report

class CriticAgent:
    @staticmethod
    def review_report(report):
        feedback = "Ensure visualizations are clear and insights are actionable. Add more context where needed."
        return feedback

class AdminAgent:
    @staticmethod
    def oversee_process(df):
        # Step 1: Data Cleaning
        df_cleaned = DataPreparationAgent.clean_data(df)

        # Step 2: Conduct EDA
        summary, correlation = EDAAgent.analyze_data(df_cleaned)
        EDAAgent.generate_visualizations(df_cleaned)

        # Step 3: Generate Report
        report = ReportGenerationAgent.generate_report(summary, correlation)

        # Step 4: Critique Report
        critique = CriticAgent.review_report(report)

        # Final Report
        final_report = f"{report}\n\nCritique: {critique}"
        return final_report

# Execute the EDA process
admin_agent = AdminAgent()
final_report = admin_agent.oversee_process(df)

# Display the final report
print(final_report)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Sample Dataset
data = {
    "Transaction_ID": ["T001", "T002", "T003", "T004", "T005", "T006", "T007", "T008"],
    "Customer_ID": ["C101", "C102", "C103", "C104", "C101", "C105", "C106", "C102"],
    "Product_Category": ["Electronics", "Groceries", "Fashion", "Electronics", "Groceries", "Fashion", "Groceries", "Electronics"],
    "Amount_Spent": [250.75, 50.00, 120.99, 80.50, 40.00, 220.30, 35.25, 300.00],
    "Transaction_Date": pd.to_datetime(["2023-12-01", "2023-12-02", "2023-12-03", "2023-12-04", "2023-12-05", "2023-12-06", "2023-12-07", "2023-12-08"]),
    "Payment_Method": ["Credit Card", "Cash", "Debit Card", "Digital Wallet", "Credit Card", "Credit Card", "Cash", "Debit Card"],
    "Feedback_Score": [4, 5, 3, 4, 5, 2, 4, 5]
}

# Load dataset into a Pandas DataFrame
df = pd.DataFrame(data)

# Define Autogen Agents
class DataPreparationAgent:
    @staticmethod
    def clean_data(df):
        # Handle missing values (if any)
        df = df.ffill()  # Forward-fill missing values
        return df

class EDAAgent:
    @staticmethod
    def analyze_data(df):
        # Compute summary statistics only for numeric columns
        summary = df.describe(include=[np.number])
        correlation = df.corr(numeric_only=True)
        return summary, correlation

    @staticmethod
    def generate_visualizations(df):
        # Distribution of Amount Spent
        plt.figure(figsize=(8, 6))
        sns.histplot(df["Amount_Spent"], kde=True)
        plt.title("Distribution of Amount Spent")
        plt.xlabel("Amount Spent")
        plt.ylabel("Frequency")
        plt.show()

        # Correlation Heatmap
        plt.figure(figsize=(8, 6))
        sns.heatmap(df.corr(numeric_only=True), annot=True, cmap="coolwarm")
        plt.title("Correlation Heatmap")
        plt.show()

class ReportGenerationAgent:
    @staticmethod
    def generate_report(summary, correlation):
        report = f"""
        Exploratory Data Analysis Report
        =================================
        Dataset Summary:
        {summary}

        Correlation Matrix:
        {correlation}

        Key Insights:
        - The average amount spent is ${summary['Amount_Spent']['mean']:.2f}.
        - Feedback scores range from {summary['Feedback_Score']['min']} to {summary['Feedback_Score']['max']}.
        - No strong correlation observed between Feedback_Score and Amount_Spent.
        """
        return report

class CriticAgent:
    @staticmethod
    def review_report(report):
        feedback = "Ensure visualizations are clear and insights are actionable. Add more context where needed."
        return feedback

class AdminAgent:
    @staticmethod
    def oversee_process(df):
        # Step 1: Data Cleaning
        df_cleaned = DataPreparationAgent.clean_data(df)

        # Step 2: Conduct EDA
        summary, correlation = EDAAgent.analyze_data(df_cleaned)
        EDAAgent.generate_visualizations(df_cleaned)

        # Step 3: Generate Report
        report = ReportGenerationAgent.generate_report(summary, correlation)

        # Step 4: Critique Report
        critique = CriticAgent.review_report(report)

        # Final Report
        final_report = f"{report}\n\nCritique: {critique}"
        return final_report

# Execute the EDA process
admin_agent = AdminAgent()
final_report = admin_agent.oversee_process(df)

# Display the final report
print(final_report)